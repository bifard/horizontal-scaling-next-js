// сборка проекта
docker build \
  -f docker/app/Dockerfile \
  --build-arg GH_SHA=$(git tag --points-at HEAD) --build-arg PORT=3002 \
  -t horizont-app:$(git tag --points-at HEAD) \
  .


//Достать статику из образа
CONTAINER_ID=$(docker create horizont-app:$(git tag --points-at HEAD))
# Прочитать BUILD_ID
BUILD_ID=$(docker cp $CONTAINER_ID:/app/.next/BUILD_ID - | tar xO)
echo "BUILD_ID: $BUILD_ID"

# Скопировать static на хост
docker cp $CONTAINER_ID:/app/.next/static ./temp-static

# Удалить временный контейнер
docker rm $CONTAINER_ID

# Параметры для стека
STACK_NAME=app
VOLUME_NAME="${STACK_NAME}_next_static"

# Создать volume если его нет
docker volume create "$VOLUME_NAME" || true

# Залить в volume
docker run --rm \
  -e BUILD_ID="$BUILD_ID" \
  -v "${VOLUME_NAME}:/dst" \
  -v "$PWD/temp-static":/src:ro \
  alpine:3.20 sh -c '
    mkdir -p "/dst/$BUILD_ID/_next"
    cp -a /src "/dst/$BUILD_ID/_next/static"
  '

# Проверить структуру
docker run --rm -e BUILD_ID="$BUILD_ID" -v "${VOLUME_NAME}:/dst" alpine:3.20 \
  ls -la "/dst/$BUILD_ID/_next/"

# Очистить
rm -rf ./temp-static



// запуск стека
STACK_NAME=app
NGINX_PORT=3000 APP_PORT_LOCAL=3003 GH_SHA=$(git tag --points-at HEAD) docker stack deploy --prune -c ./docker/docker-stack.yml "$STACK_NAME"